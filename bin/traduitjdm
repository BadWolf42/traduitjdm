#!/usr/bin/python3

version = "0.2.1"

import inspect
import getopt
import sys
import os.path
import texte
import json
from fichierSource import FichierSource
from texte import Texte
from verbose import *

backup = False
langue = None
jeedomDir = "/var/www/html"
plugin = None


def options():
    '''Traitement de options de la ligne de commande.

    '''

    # Variables globales modifiées dans cette procédure
    global verbose
    global debug
    global backup
    global langue
    global jeedomDir
    global plugin

    langues = ("de_DE", "en_US", "es_ES", "fr_FR", "id_ID", "it_IT", "ja_JP", "pt_PT", "ru_RU", "tr")

    usage = """
Usage:
~~~~~~
    """  + os.path.basename(sys.argv[0]) + """ [-V] [-h] [-v] [-d] [-L] [-b] [-j <jeedomDir>] -l <langueCible> plugin

    Outils pour la traduction de plugin Jeedom

    -h                Affichage de cette aide
    -V                Affichage de la version
    -v                Un peu de babillage
    -d                Debug (implique -v)
    -b                Backup: le fichier existant est renommé avec l'extention ".bck"
    -L                Affiche la liste des langues reconnues
    -j <jeedomDir>    Répertoire d'installation de Jeedom ('""" + jeedomDir + """' par défaut)
    -l <langueCible>  Langue cible de la traduction

"""

    try:
        opts, args = getopt.getopt(sys.argv[1:], "VhvdbjL:l:")
    except getopt.GetoptError as err:
        print (err)
        sys.stderr.write(usage)
        sys.exit(1)

    for opt, arg in opts:

        if opt == "-V":
            print ("\n", os.path.basename(sys.argv[0]), "Version:", version , "\n\n")
            sys.exit(0)

        elif opt == "-h":
            sys.stderr.write(usage)
            sys.exit(1)

        elif opt == "-j":
            jeedomDir = arg
            if jeedomDir.endswith("/"):
                jeedomDir = jeedomDir[:-1]

        elif opt == "-L":
            sys.stderr.write ("Les langues reconnues sont:\n   " + "\n   ".join(langues) + "\n")
            sys.exit(1)

        elif opt == "-l":
            langue = arg

        elif opt == "-v":
            set_verbose(True)

        elif opt == "-d":
            set_verbose(True)
            set_debug(True)

        elif opt == "-b":
            backup = True

    if len(args) == 0:
        sys.stderr.write("\nNom du plugin manquant!\n" + usage)
        sys.exit(1)
    
    plugin = args[0]

    if langue is None:
        sys.stderr.write("\nOption -l manquante!\n" + usage)
        sys.exit(1)

    if not langue in langues:
        sys.stderr.write ("Les langues reconnues sont:\n   " + "\n   ".join(langues) + "\n")
        sys.exit(1)



def plugin_dir():
    # Le chemin d'accès à la racine du plugin
    return jeedomDir + "/plugins/" + plugin




def get_textes_from_source():
    Verbose ("Lecture du code...\n")
    textesFromPlugin = dict()
    for root, dirs, files in os.walk(plugin_dir()):
        for dirname in dirs:
            if dirname[0] == ".":
                dirs.remove(dirname)

        for fileName in files:
            if fileName[-4:] == ".php" or fileName[-3:] == ".js":
                Verbose ("    " + fileName + "...\n")
                fichier = FichierSource(root + "/" + fileName)
                fichier.search_textes()
    return textesFromPlugin



def get_textes_from_precedent():
    try:
        with open(plugin_dir() + "/core/i18n/" + langue + ".json") as f:
            content = f.read()
    except Exception as ex:
        Verbose ("Pas de version précédente à lire!\n")
        return

    Verbose ("Lecture de la version précédente...\n")
    data = json.loads(content)

    for fkey in data:
        fs = FichierSource.by_key(fkey)
        for texte in data[fkey]:
            txt = Texte.by_texte(texte)
            txt.set_traduction(langue, data[fkey][texte], "precedent", fkey)
            fs.add_texte(txt)


def write_traduction( textes ="" ):
    Verbose ("Ecriture du fichier de traduction...\n")
    fileName = plugin_dir() + "/core/i18n/" + langue + ".json"

    if backup:
        Verbose ("    Rotation des fichiers existants...\n")
        if os.path.exists (fileName + ".bck.5"):
            os.unlink(fileName + ".bck.5")

        for i in [4,3,2,1]:
            if os.path.exists (fileName + ".bck." + str(i)):
                os.rename (fileName + ".bck." + str(i), fileName + ".bck." + str(i+1))

        if os.path.exists (fileName + ".bck"):
            os.rename (fileName + ".bck" , fileName + ".bck.1")

        if os.path.exists (fileName):
            os.rename (fileName, fileName + ".bck")

    result = dict()
    for fs in FichierSource.get_fichiers_source():
        trad = fs.get_traduction('fr_FR')
        if trad != None:
            result[fs.get_key()] = trad

    with open(fileName, "w") as f:
        f.write(json.dumps(result, ensure_ascii=False, sort_keys = True, indent=4).replace("/","\/"))



options()
FichierSource.set_jeedom_dir(jeedomDir)
get_textes_from_source()
get_textes_from_precedent()
write_traduction();
