#!/usr/bin/python3

version = "0.10.2"

import argparse
import getopt
import sys
import os.path
import texte
import json
import glob
from fichierSource import FichierSource
from texte import Texte
from message import *

backup = False
langues = None
jeedomDir = "/var/www/html"
plugin = None
purge = False
indent = 4

def options():
    '''Traitement de options de la ligne de commande.

    '''

    # Variables globales modifiées dans cette procédure
    global verbose
    global debug
    global backup
    global langues
    global jeedomDir
    global plugin
    global purge
    global indent

    languesConnues = ("de_DE", "en_US", "es_ES", "fr_FR", "id_ID", "it_IT", "ja_JP", "pt_PT", "ru_RU")
    cfgFile = os.path.realpath(os.path.dirname(sys.argv[0]) + "/../etc/" + os.path.basename(sys.argv[0] + ".cfg"))
    cfgFileParDefaut = True

    parser = argparse.ArgumentParser(description="Génération de fichiers de traduction pour les plugins Jeedom", add_help=False)
    infos_group = parser.add_argument_group('infos')
    infos_group.add_argument('-h', '--help', action='help', help="Affiche cette aide et quitte")
    infos_group.add_argument('-V', '--version', action='version', version=f"version: {version}", help="Affiche la version du programme et quitte")
    infos_group.add_argument('-L', '--langues-connues', action='store_true', help='Affiche la liste des langues reconnues et quitte')
    exec_group = parser.add_argument_group('Traduction')
    exec_group.add_argument('-v', '--verbose', action='store_true', help='Un peu de babillage')
    exec_group.add_argument('-d', '--debug', action='store_true', help='Un peu plus de babillage')
    exec_group.add_argument('-C', '--nocolor', action='store_true', help="Désactive l'affichage en couleur")
    exec_group.add_argument('-b', '--backup', action='store_true', help="Les fichiers existants sont renommés avec l'extension \".bck\"")
    exec_group.add_argument('-p', '--purge', action='store_true', help="Retire les textes qui ne sont pas/plus trouvés dans le code")
    exec_group.add_argument('-t', '--tab', action='store_true', help="Utilisation de tabulations pour les indentations (sinon, les indentations sont de 4 espaces)")
    exec_group.add_argument('-c', '--config', metavar="ConfigFile", type=argparse.FileType('r'), default=cfgFile, help=f"Fichier de configuration ('{cfgFile}' par défaut)")
    exec_group.add_argument('-j', '--JeeDir', metavar="JeedomDir", help=f"Répertoire d'installation de Jeedom ('{jeedomDir}' par défaut)")
    exec_group.add_argument('-f', '--force', nargs='+', choices=['core'], help='Priorité aux traductions provenant du core de Jeedom')
    exec_group.add_argument('-l', '--langues', nargs='+', help="Liste des langues cible")
    exec_group.add_argument('plugin', nargs='?', help="Le plugin à traduire")
    args = parser.parse_args()

    print(args)
    if args.langues_connues:
        print ("\nLes langues reconnues sont:\n   " + "\n   ".join(languesConnues) + "\n")
        sys.exit(0)

    if args.verbose:
        set_verbose(True)

    if args.debug:
        set_verbose(True)
        set_debug(True)

    if args.nocolor:
        set_color(False)

    if args.backup:
        backup = True

    if args.purge:
        purge = True

    if args.tab:
        indent = "\t"

    if args.JeeDir:
        jeedomDir = args.JeeDir
        if jeedomDir.endswith("/"):
            jeedomDir = jeedomDir[:-1]
    
    if args.force:
        if args.force[0] == "core":
            Texte.set_priorite('core')

    if args.langues:
        langues = args.langues

    if args.plugin:
        plugin = args.plugin

    # Lecture du fichier de configuration
    #####################################
    try:
        content = args.config.read().splitlines()

        Verbose ("Lecture du fichier de configuration <", cfgFile, ">")
        stanza = ""
        for line in content:
            pos = line.find("#")
            if pos >= 0:
                line = line[0:pos]
            line = line.strip()
            if len(line) > 0:
                if line[0] == "[" and line[-1] == "]":
                    stanza = line[1:-1].lower()
                    Debug ("  stanza: ", stanza)
                elif stanza == "global":
                    (key, egal, value) = line.partition("=")
                    key = key.strip().lower()
                    value = value.strip()
                    Debug ("    ", key, ":\t", value)
                    if key == "langues":
                        if langues is None :
                            langues = set(value.split(","))
                    elif key == "plugin":
                        if plugin is None:
                            plugin = value

    except FileNotFoundError:
        if not cfgFileParDefaut:
            Error (" Le fichier de configuration <", cfgFile, "> est introuvable!")
            sys.exit (1)

    # Vérification des paramètres
    #############################
    if plugin is None:
        Error ("\n Nom du plugin à traduire n'est pas défini!")
        parser.print_usage()
        sys.exit(1)
    
    if langues is None:
        Error ("\n Option -l manquante!")
        parser.print_usage()
        sys.exit(1)

    for langue in langues:
        if not langue in languesConnues:
            Error ("\n <" + langue + "> n'est pas une langue reconnue!")
            sys.stderr.write ("\n Les langues reconnues sont:\n   " + "\n   ".join(languesConnues) + "\n")
            sys.exit(1)


def plugin_dir():
    # Le chemin d'accès à la racine du plugin
    return f"{jeedomDir}/plugins/{plugin}"


def get_textes_from_source():
    Verbose ("Recherche de textes dans le code...")
    textesFromPlugin = dict()
    for root, dirs, files in os.walk(plugin_dir()):
        for dirname in dirs:
            if dirname[0] == ".":
                dirs.remove(dirname)
            if (dirname == "docs" and root == plugin_dir()):
                dirs.remove(dirname)

        for fileName in files:
            if ( fileName[-4:] == ".php"
              or fileName[-3:] == ".js"
              or fileName[-5:] == ".json"
              or fileName[-5:] == ".html"):
                Verbose (f"    {root}/{fileName}...")
                fichier = FichierSource(f"{root}/{fileName}")
                fichier.search_textes()
    return textesFromPlugin


def get_textes_from_precedent():
    Verbose ("Lecture des traductions existantes...")
    for langue in langues:
        Verbose ("    Langue: " + langue + "...")
        content = None
        try:
            with open(plugin_dir() + "/core/i18n/" + langue + ".json") as f:
                content = f.read()
        except Exception as ex:
            Verbose ("        Pas de version précédente à lire!")

        if content != None:
            data = json.loads(content)

            for fkey in data:
                fs = FichierSource.by_key(fkey)
                for texte in data[fkey]:
                    txt = Texte.by_texte(texte)
                    if purge and not txt in fs.get_textes():
                        continue
                    txt.add_traduction(langue, data[fkey][texte], "precedent", fkey)
                    fs.add_texte(txt)


def get_textes_from_core():
    Verbose ("Recherche des traductions dans le core...")
    for langue in langues:
        if langue != "fr_FR":
            Verbose ("    Langue: " + langue + "...")
            try:
                with open( jeedomDir + "/core/i18n/" + langue + ".json") as f:
                    content = f.read()
            except Exception as ex:
                Verbose ("        Erreur lors de la lecture de " + langue + ".json!")

            data = json.loads(content)
            for fkey in data:
                fs = FichierSource.by_key(fkey)
                for texte in data[fkey]:
                    txt = Texte.by_texte(texte, False)
                    if (txt != None):
                        txt.add_traduction(langue, data[fkey][texte], "core")

def write_traduction( textes ="" ):
    Verbose ("Ecriture du/des fichier(s) de traduction(s)...")
    for langue in langues:
        Verbose (f"    Langue: {langue}...")

        fileName = plugin_dir() + "/core/i18n"
        if (not os.path.exists (fileName)):
                os.mkdir(fileName)
        fileName = fileName + "/" + langue + ".json"

        if backup:
            Verbose ("        Rotation des fichiers existants...")
            if os.path.exists (fileName + ".bck.5"):
                os.unlink(fileName + ".bck.5")

            for i in [4,3,2,1]:
                if os.path.exists (fileName + ".bck." + str(i)):
                    os.rename (fileName + ".bck." + str(i), fileName + ".bck." + str(i+1))

            if os.path.exists (fileName + ".bck"):
                os.rename (fileName + ".bck" , fileName + ".bck.1")

            if os.path.exists (fileName):
                os.rename (fileName, fileName + ".bck")

        result = dict()
        for fs in FichierSource.get_fichiers_source():
            trad = fs.get_traduction(langue)
            if trad != None:
                result[fs.get_key()] = trad

        with open(fileName, "w") as f:
            f.write(json.dumps(result, ensure_ascii=False, sort_keys = True, indent= indent).replace("/","\/"))



options()
FichierSource.set_jeedom_dir(jeedomDir)
get_textes_from_source()
get_textes_from_precedent()
get_textes_from_core()
write_traduction();
