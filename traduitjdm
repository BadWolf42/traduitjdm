#!/usr/bin/python3

version = 0.1

import inspect
import getopt
import sys
import os.path
import re

verbose = False
debug = False
backup = False
langue = None
jeedomDir = "/var/www/html"
plugin = None

def Verbose(txt):
    ''' Affichage de message Verbose

    '''
    if verbose:
        sys.stderr.write (txt)



def Debug(txt):
    ''' Affichage de message Debug

    '''
    if debug:
        sys.stderr.write (txt)



def Options():
    '''Traitement de options de la ligne de commande.

    '''

    # Variables globales modifiées dans cette procédure
    global verbose
    global debug
    global backup
    global langue
    global jeedomDir
    global plugin

    usage = """
Usage:
~~~~~~
    """  + os.path.basename(sys.argv[0]) + """ [-V] [-h] [-v] [-d] [-b] [-j <jeedomDir>] -l <langueCible> plugin

    Outils pour la traduction de plugin Jeedom

    -h                Affichage de cette aide
    -V                Affichage de la version
    -v                Un peu de babillage
    -d                Debug (implique -v)
    -b                Backup: le fichier existant est renommé avec l'extention ".bck"
    -j <jeedomDir>    Répertoire d'installation de Jeedom ('""" + jeedomDir + """' par défaut)
    -l <langueCible>  Langue cible de la traduction

"""

    try:
        opts, args = getopt.getopt(sys.argv[1:], "Vhvdbj:l:")
    except getopt.GetoptError as err:
        print (err)
        sys.stderr.write(usage)
        sys.exit(1)

    for opt, arg in opts:

        if opt == "-V":
            print ("\n", os.path.basename(sys.argv[0]), "Version:", version , "\n\n")
            sys.exit(9)

        if opt == "-h":
            sys.stderr.write(usage)
            sys.exit(1)

        if opt == "-j":
            jeedomDir = arg
        if jeedomDir.endswith("/"):
            jeedomDir = jeedomDir[:-1]

        elif opt == "-l":
            langue = arg

        elif opt == "-v":
            verbose = True

        elif opt == "-d":
            verbose = True
            debug = True

        elif opt == "-b":
            backup = True

    plugin = args[0]
    if plugin is None:
        sys.stderr.write("Nom du plugin manquant!" + usage)
        sys.exit(1)

    if langue is None:
        sys.stderr.write("\nOption -l manquante!\n" + usage)
        sys.exit(1)



def PluginDir():
    # Le chemin d'accès à la racine du plugin
    return jeedomDir + "/plugins/" + plugin



def GetTextesFromFile(fileName):
    ''' Lecture d'un fichier code Recherche de texte à traduire

    '''
    Verbose ("    " + fileName + "\n")

    # Contiendra la liste des textes trouvés dans
    # le fichier en garantissant l'unicité
    textes = set()

    # On met le contenu du fichier en mémoire
    try:
        with (open(fileName, "r")) as f:
            content = f.read()
    except Exception as ex:
        info = inspect.currentframe()
        print (ex, "( at line" , info.f_lineno , ")")
        sys.exit(1)

    Verbose ("        Recherche des {{..}}\n")

    # Recherche du premier {{
    pos = content.find("{{")
    while pos >= 0:
        # Retrait des premiers {{ et de ce qui précède
        content = content[pos + 2:]

        # On garde ce qui précède le prochains }}
        pos = content.find("}}")
        txt = content[:pos]
        textes.add(txt)

        # retrait du texte
        content = content[pos:]
        pos = content.find("{{")

    if fileName[-4:] == ".php":
        # On remet le contenu du fichier en mémoire
        try:
            with (open(fileName, "r")) as f:
                content = f.read()
        except Exception as ex:
            info = inspect.currentframe()
            print (ex, "( at line" , info.f_lineno , ")")
            sys.exit(1)

        # Retrait des éventuels espaces qui entourent __FILE__ 
        content = re.sub (",\s*__FILE__\s*\)", ",__FILE__)", content)

        Verbose ("        Recherche des __(...,__FILE__) \n")
        pos = content.find("__(")
        while pos >= 0:
            # Retrait du premier __( et de ce qui précède
            content = content[pos + 3:]

            # On garde ce qui précède le prochain ,__FILE)
            pos = content.find(",__FILE__)")
            txt = content[:pos]

            # On enlève les simples ou doubles quotes qui entourent le texte
            if (txt[0] == "'" and txt [-1] == "'") or (txt[0] == '"' and txt [-1] == '"'):
                txt = txt[1:-1]

            textes.add(txt)

            # Retrait du prochain __( et de ce qui précède
            content = content[pos:]
            pos = content.find("__(")

    if debug:
        for txt in sorted(textes):
            Debug ("           " + txt + "\n")

    return sorted(textes)



def GetTextesFromPlugin():
    Verbose ("Lecture du code...\n")
    textesFromPlugin = dict()
    for root, dirs, files in os.walk(PluginDir()):
        for dirname in dirs:
            if dirname[0] == ".":
                dirs.remove(dirname)

        for fileName in files:
            if fileName[-4:] == ".php" or fileName[-3:] == ".js":
                textes = GetTextesFromFile (root + "/" + fileName)
                if len(textes) > 0:
                    key = (root + "/" + fileName)[len(jeedomDir)+1:]
                    key = key.replace("/", "\/")
                    textesFromPlugin[key] = textes
    return textesFromPlugin



def WriteTraduction( textes ):
    Verbose ("Ecriture du fichier de traduction...\n")
    fileName = PluginDir() + "/core/i18n/" + langue + ".json"

    if backup:
        Verbose ("    Rotation des fichiers existants...\n")
        if os.path.exists (fileName + ".bck.5"):
            os.unlink(fileName + ".bck.5")

        for i in [4,3,2,1]:
            if os.path.exists (fileName + ".bck." + str(i)):
                os.rename (fileName + ".bck." + str(i), fileName + ".bck." + str(i+1))

        if os.path.exists (fileName + ".bck"):
            os.rename (fileName + ".bck" , fileName + ".bck.1")

        if os.path.exists (fileName):
            os.rename (fileName, fileName + ".bck")

    with open(fileName, "w") as f:
        firstFile = True
        f.write("{\n")
        for file  in textes:
            if firstFile:
                f.write('    "' + file + '": {\n')
                firstFile = False
            else:
                f.write(',\n    "' + file + '": {\n')

            firstTxt = True
            for txt in textes[file]:
                if firstTxt:
                    f.write('        "' + txt + '": "' + txt + '"')
                    firstTxt = False
                else:
                    f.write(',\n        "' + txt + '": "' + txt + '"')
            f.write("\n    }")
                    
        f.write("\n}\n")

Options()
textes = GetTextesFromPlugin()
WriteTraduction(textes);
